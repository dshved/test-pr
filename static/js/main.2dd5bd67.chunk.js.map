{"version":3,"sources":["components/Dialog.js","components/TableHead.js","components/TableToolbar.js","utils/helpers.js","components/Table.js","utils/api.js","App.js","serviceWorker.js","index.js"],"names":["DialogTitle","withStyles","theme","root","borderBottom","concat","palette","divider","margin","padding","spacing","unit","closeButton","position","right","top","color","grey","props","children","classes","onClose","react_default","a","createElement","DialogTitle_default","disableTypography","className","Typography_default","variant","IconButton_default","aria-label","onClick","Close_default","SimpleDialog","handleClose","_this","_this$props","this","detail","other","Object","objectWithoutProperties","Dialog_default","assign","Dialog_DialogTitle","style","paddingLeft","paddingRight","Grid_default","container","item","xs","sm","TextField_default","fullWidth","label","defaultValue","name","InputProps","readOnly","alpha2Code","capital","region","population","area","timezones","length","languages","join","Component","paper","paperScrollPaper","maxHeight","height","tableHeadRows","id","numeric","disablePadding","SimpleTableHead","createSortHandler","property","event","onRequestSort","_this2","order","orderBy","TableHead_default","TableRow_default","map","row","TableCell_default","key","align","sortDirection","Tooltip_default","title","placement","enterDelay","TableSortLabel_default","active","direction","TableToolbar","_ref","Toolbar_default","desc","b","SimpleTable","state","page","rowsPerPage","handleRequestSort","setState","handleClick","onCountrySelect","handleChangePage","handleChangeRowsPerPage","target","value","_this$state","data","emptyRows","Math","min","Paper_default","components_TableToolbar","Table_default","components_TableHead","TableBody_default","array","cmp","stabilizedThis","el","index","sort","stableSort","getSorting","slice","n","i","tabIndex","Button_default","size","colSpan","TablePagination_default","rowsPerPageOptions","component","count","onChangePage","onChangeRowsPerPage","getCountryes","asyncToGenerator","regenerator_default","mark","_callee","response","regions","wrap","_context","prev","next","fetch","sent","json","push","Array","abrupt","entries","stop","apply","arguments","App","open","handleClickOpen","country","countries","components_Table","gutterBottom","renderRegions","components_Dialog","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2dd5bd67.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst styles = {\n  container: {\n    padding: \"20px\",\n  },\n  paper: {\n    margin: 0,\n  },\n  paperScrollPaper: {\n    maxHeight: \"100%\",\n    height: \"450px\",\n  },\n};\n\nconst DialogTitle = withStyles(theme => ({\n  root: {\n    borderBottom: `1px solid ${theme.palette.divider}`,\n    margin: 0,\n    padding: theme.spacing.unit * 2,\n  },\n  closeButton: {\n    position: \"absolute\",\n    right: theme.spacing.unit,\n    top: theme.spacing.unit,\n    color: theme.palette.grey[500],\n  },\n}))(props => {\n  const { children, classes, onClose } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton\n          aria-label=\"Close\"\n          className={classes.closeButton}\n          onClick={onClose}\n        >\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nclass SimpleDialog extends Component {\n  static propTypes = {\n    detail: PropTypes.object.isRequired,\n    onClose: PropTypes.func.isRequired,\n  };\n\n  handleClose = () => {\n    this.props.onClose();\n  };\n\n  render() {\n    const { detail, onClose, ...other } = this.props;\n\n    return (\n      <Dialog onClose={this.handleClose} {...other}>\n        <DialogTitle onClose={this.handleClose}>SELECTED COUNTRY</DialogTitle>\n        <div style={{ paddingLeft: 20, paddingRight: 20 }}>\n          <Grid container spacing={16}>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth={true}\n                label=\"Name\"\n                defaultValue={detail.name}\n                margin=\"normal\"\n                InputProps={{\n                  readOnly: true,\n                }}\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth={true}\n                label=\"alpha2Code\"\n                defaultValue={detail.alpha2Code}\n                margin=\"normal\"\n                InputProps={{\n                  readOnly: true,\n                }}\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth={true}\n                label=\"Capital\"\n                defaultValue={detail.capital}\n                margin=\"normal\"\n                InputProps={{\n                  readOnly: true,\n                }}\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth={true}\n                label=\"Region\"\n                defaultValue={detail.region}\n                margin=\"normal\"\n                InputProps={{\n                  readOnly: true,\n                }}\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth={true}\n                label=\"Population\"\n                defaultValue={detail.population}\n                margin=\"normal\"\n                InputProps={{\n                  readOnly: true,\n                }}\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth={true}\n                label=\"Area\"\n                defaultValue={detail.area}\n                margin=\"normal\"\n                InputProps={{\n                  readOnly: true,\n                }}\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth={true}\n                label=\"Number of timezones\"\n                defaultValue={detail.timezones ? detail.timezones.length : 1}\n                margin=\"normal\"\n                InputProps={{\n                  readOnly: true,\n                }}\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth={true}\n                label=\"List of languages spoken\"\n                defaultValue={\n                  detail.languages ? detail.languages.join(\", \") : \"\"\n                }\n                margin=\"normal\"\n                InputProps={{\n                  readOnly: true,\n                }}\n                variant=\"outlined\"\n              />\n            </Grid>\n          </Grid>\n        </div>\n      </Dialog>\n    );\n  }\n}\n\nexport default withStyles(styles)(SimpleDialog);\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\n\nconst tableHeadRows = [\n  {\n    id: \"name\",\n    numeric: false,\n    disablePadding: true,\n    label: \"Name\",\n  },\n  {\n    id: \"population\",\n    numeric: true,\n    disablePadding: false,\n    label: \"Population\",\n  },\n];\n\nclass SimpleTableHead extends Component {\n  static propTypes = {\n    order: PropTypes.string.isRequired,\n    orderBy: PropTypes.string.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n  };\n\n  createSortHandler = property => event => {\n    this.props.onRequestSort(event, property);\n  };\n\n  render() {\n    const { order, orderBy } = this.props;\n\n    return (\n      <TableHead>\n        <TableRow>\n          {tableHeadRows.map(\n            row => (\n              <TableCell\n                key={row.id}\n                align={row.numeric ? \"right\" : \"left\"}\n                sortDirection={orderBy === row.id ? order : false}\n              >\n                <Tooltip\n                  title=\"Sort\"\n                  placement={row.numeric ? \"bottom-end\" : \"bottom-start\"}\n                  enterDelay={300}\n                >\n                  <TableSortLabel\n                    active={orderBy === row.id}\n                    direction={order}\n                    onClick={this.createSortHandler(row.id)}\n                  >\n                    {row.label}\n                  </TableSortLabel>\n                </Tooltip>\n              </TableCell>\n            ),\n            this,\n          )}\n          <TableCell />\n        </TableRow>\n      </TableHead>\n    );\n  }\n}\n\nexport default SimpleTableHead;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst TableToolbar = ({ region }) => {\n  return (\n    <Toolbar>\n      <div>\n        <Typography variant=\"h6\" id=\"tableTitle\">\n          {region}\n        </Typography>\n      </div>\n    </Toolbar>\n  );\n};\n\nTableToolbar.propTypes = {\n  region: PropTypes.string.isRequired,\n};\n\nexport default TableToolbar;\n","export function desc(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nexport function stableSort(array, cmp) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = cmp(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map(el => el[0]);\n}\n\nexport function getSorting(order, orderBy) {\n  return order === \"desc\"\n    ? (a, b) => desc(a, b, orderBy)\n    : (a, b) => -desc(a, b, orderBy);\n}\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Button from \"@material-ui/core/Button\";\nimport TTableHead from \"./TableHead\";\nimport TableToolbar from \"./TableToolbar\";\n\nimport { stableSort, getSorting } from \"../utils/helpers\";\n\nclass SimpleTable extends Component {\n  static propTypes = {\n    data: PropTypes.array.isRequired,\n    region: PropTypes.string.isRequired,\n  };\n\n  state = {\n    order: \"asc\",\n    orderBy: \"name\",\n    page: 0,\n    rowsPerPage: 5,\n  };\n  handleRequestSort = (event, property) => {\n    const orderBy = property;\n    let order = \"desc\";\n\n    if (this.state.orderBy === property && this.state.order === \"desc\") {\n      order = \"asc\";\n    }\n\n    this.setState({ order, orderBy });\n  };\n\n  handleClick = (event, id) => {\n    this.props.onCountrySelect(id);\n  };\n\n  handleChangePage = (event, page) => {\n    this.setState({ page });\n  };\n\n  handleChangeRowsPerPage = event => {\n    this.setState({ rowsPerPage: event.target.value });\n  };\n\n  render() {\n    const { order, orderBy, rowsPerPage, page } = this.state;\n    const { data, region } = this.props;\n    const emptyRows =\n      rowsPerPage - Math.min(rowsPerPage, data.length - page * rowsPerPage);\n\n    return (\n      <Paper>\n        <TableToolbar region={region} />\n        <div>\n          <Table>\n            <TTableHead\n              order={order}\n              orderBy={orderBy}\n              onRequestSort={this.handleRequestSort}\n            />\n            <TableBody>\n              {stableSort(data, getSorting(order, orderBy))\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((n, i) => {\n                  return (\n                    <TableRow tabIndex={-1} key={i}>\n                      <TableCell>{n.name}</TableCell>\n                      <TableCell align=\"right\">{n.population}</TableCell>\n                      <TableCell align=\"right\">\n                        <Button\n                          size=\"small\"\n                          variant=\"outlined\"\n                          onClick={event => this.handleClick(event, n)}\n                        >\n                          Detail\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              {emptyRows > 0 && (\n                <TableRow style={{ height: 49 * emptyRows }}>\n                  <TableCell colSpan={2} />\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </div>\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={data.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={this.handleChangePage}\n          onChangeRowsPerPage={this.handleChangeRowsPerPage}\n        />\n      </Paper>\n    );\n  }\n}\n\nexport default SimpleTable;\n","const DATA_URL = \"https://restcountries.eu/rest/v1/all\";\n\nexport const getCountryes = async () => {\n  const response = await fetch(DATA_URL);\n  const data = await response.json();\n  const regions = {};\n  data.map(item => {\n    if (regions[item.region]) {\n      regions[item.region].push(item);\n    } else {\n      regions[item.region] = new Array(item);\n    }\n    return false;\n  });\n  return Object.entries(regions);\n};\n","import React, { Component } from \"react\";\n\nimport Typography from \"@material-ui/core/Typography\";\n\nimport Dialog from \"./components/Dialog\";\nimport Table from \"./components/Table\";\n\nimport { getCountryes } from \"./utils/api\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    regions: [],\n    data: [],\n    detail: {},\n    open: false,\n  };\n  async componentDidMount() {\n    const regions = await getCountryes();\n    this.setState({\n      regions,\n    });\n  }\n\n  handleClickOpen = country => {\n    this.setState({\n      open: true,\n      detail: country,\n    });\n  };\n\n  handleClose = value => {\n    this.setState({ open: false });\n  };\n\n  renderRegions() {\n    const { regions } = this.state;\n    return regions.map((region, id) => {\n      const countries = [];\n      return (\n        <section key={id}>\n          {region[1].map((country, id) => {\n            countries.push(country);\n            return false;\n          })}\n          <Table\n            data={countries}\n            onCountrySelect={this.handleClickOpen}\n            region={region[0]}\n          />\n          <br />\n        </section>\n      );\n    });\n  }\n  render() {\n    const { regions, detail } = this.state;\n    return (\n      <div className=\"wrapper\">\n        <header>\n          <Typography align=\"center\" component=\"h1\" variant=\"h2\" gutterBottom>\n            World Regions\n          </Typography>\n        </header>\n        <main>\n          {regions.length === 0 ? <div>Loading...</div> : this.renderRegions()}\n        </main>\n        <Dialog\n          open={this.state.open}\n          detail={detail}\n          onClose={this.handleClose}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}